[
	{
		"id": 1,
		"name": "Two Sum",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 67.26,
			"memory": 42.44
		}
	},
	{
		"id": 27,
		"name": "Remove Element",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 79.75,
			"memory": 54.59
		}
	},
	{
		"id": 1071,
		"name": "Greatest Common Divisor of Strings",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 89.49,
			"memory": 35.43
		}
	},
	{
		"id": 2,
		"name": "Add Two Numbers",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 93.51,
			"memory": 68.17
		}
	},
	{
		"id": 49,
		"name": "Group Anagrams",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 99.84,
			"memory": 54.77
		}
	},
	{
		"id": 2966,
		"name": "Divide Array Into Arrays With Max Difference",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 43.13,
			"memory": 20.63
		}
	},
	{
		"id": 3,
		"name": "Longest Substring Without Repeating Characters",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 39.18,
			"memory": 58.86
		}
	},
	{
		"id": 4,
		"name": "Median of Two Sorted Arrays",
		"complexity": "Hard",
		"performance":
		{
			"runtime": 93.30,
			"memory": 69.77
		}
	},
	{
		"id": 5,
		"name": "Longest Palindromic Substring",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 44.30,
			"memory": 65.33
		}
	},
	{
		"id": 1291,
		"name": "Sequential Digits",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 100,
			"memory": 42
		}
	},
	{
		"id": 26,
		"name": "Remove Duplicates from Sorted Array",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 68.42,
			"memory": 32.7
		}
	},
	{
		"id": 7,
		"name": "Reverse Integer",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 71.22,
			"memory": 72.83
		}
	},
	{
		"id": 8,
		"name": "String to Integer (atoi)",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 50.32,
			"memory": 74.75
		}
	},
	{
		"id": 9,
		"name": "Palindrome Number",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 47.54,
			"memory": 95.65
		}
	},
	{
		"id": 11,
		"name": "Container With Most Water",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 9.31,
			"memory": 53.96
		}
	},
	{
		"id": 13,
		"name": "Roman to Integer",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 96.24,
			"memory": 71.49
		}
	},
	{
		"id": 14,
		"name": "Longest Common Prefix",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 35.57,
			"memory": 74.33
		}
	},
	{
		"id": 15,
		"name": "3Sum",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 38.6,
			"memory": 95.73
		}
	},
	{
		"id": 17,
		"name": "Letter Combinations of a Phone Number",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 24.65,
			"memory": 87.9
		}
	},
	{
		"id": 19,
		"name": "Remove Nth Node From End of List",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 85.26,
			"memory": 79.96
		}
	},
	{
		"id": 20,
		"name": "Valid Parentheses",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 93.72,
			"memory": 16.65
		}
	},
	{
		"id": 21,
		"name": "Merge Two Sorted Lists",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 90.22,
			"memory": 79.17
		}
	},
	{
		"id": 22,
		"name": "Generate Parentheses",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 81.8,
			"memory": 38.80
		}
	},
	{
		"id": 28,
		"name": "Find the Index of the First Occurrence in a String",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 35.65,
			"memory": 59.93
		}
	},
	{
		"id": 29,
		"name": "Divide Two Integers",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 87.20,
			"memory": 18.45
		}
	},
	{
		"id": 34,
		"name": "Find First and Last Position of Element in Sorted Array",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 64.79,
			"memory": 19.95
		}
	},
	{
		"id": 36,
		"name": "Valid Sudoku",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 96.89,
			"memory": 80.88
		}
	},
	{
		"id": 48,
		"name": "Rotate Image",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 87.90,
			"memory": 24.84
		}
	},
	{
		"id": 66,
		"name": "Plus One",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 76.84,
			"memory": 72.62
		}
	},
	{
		"id": 67,
		"name": "Add Binary",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 57.49,
			"memory": 55.99
		}
	},
	{
		"id": 69,
		"name": "Sqrt(x)",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 81.47,
			"memory": 36.86
		}
	},
	{
		"id": 70,
		"name": "Climbing Stairs",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 82.33,
			"memory": 11.25
		}
	},
	{
		"id": 71,
		"name": "Simplify Path",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 75.51,
			"memory": 29.9
		}
	},
	{
		"id": 88,
		"name": "Merge Sorted Array",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 64.63,
			"memory": 52.22
		}
	},
	{
		"id": 121,
		"name": "Best Time to Buy and Sell Stock",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 93.48,
			"memory": 74.97
		}
	},
	{
		"id": 135,
		"name": "Candy",
		"complexity": "Hard",
		"performance":
		{
			"runtime": 91.7,
			"memory": 91.7
		}
	},
	{
		"id": 146,
		"name": "LRU Cache",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 38.56,
			"memory": 80.39
		}
	},
	{
		"id": 189,
		"name": "Rotate Array",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 53.41,
			"memory": 50.77
		}
	},
	{
		"id": 258,
		"name": "Add Digits",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 90.13,
			"memory": 43.31
		}
	},
	{
		"id": 347,
		"name": "Top K Frequent Elements",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 74.73,
			"memory": 54.83
		}
	},
	{
		"id": 705,
		"name": "Design HashSet",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 41.45,
			"memory": 31.58
		}
	},
	{
		"id": 989,
		"name": "Add to Array-Form of Integer",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 15.41,
			"memory": 87.26
		}
	},
	{
		"id": 1396,
		"name": "Design Underground System",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 100,
			"memory": 19.44
		}
	},
	{
		"id": 1431,
		"name": "Kids With the Greatest Number of Candies",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 33.1,
			"memory": 67.31
		}
	},
	{
		"id": 1456,
		"name": "Maximum Number of Vowels in a Substring of Given Length",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 77.84,
			"memory": 48.2
		}
	},
	{
		"id": 1470,
		"name": "Shuffle the Array",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 35.70,
			"memory": 16.77
		}
	},
	{
		"id": 1491,
		"name": "Average Salary Excluding the Minimum and Maximum Salary",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 83.88,
			"memory": 37.83
		}
	},
	{
		"id": 1523,
		"name": "Count Odd Numbers in an Interval Range",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 95.98,
			"memory": 22.86
		}
	},
	{
		"id": 1822,
		"name": "Sign of the Product of an Array",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 38.78,
			"memory": 26.62
		}
	},
	{
		"id": 2390,
		"name": "Removing Stars From a String",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 81.13,
			"memory": 69.81
		}
	},
	{
		"id": 2405,
		"name": "Optimal Partition of String",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 99.6,
			"memory": 50.39
		}
	},
	{
		"id": 238,
		"name": "Product of Array Except Self",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 74.67,
			"memory": 43.96
		}
	},
	{
		"id": 225,
		"name": "Implement Stack using Queues",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 94.84,
			"memory": 54.52
		}
	},
	{
		"id": 2483,
		"name": "Minimum Penalty for a Shop",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 100,
			"memory": 77.78
		}
	},
	{
		"id": 53,
		"name": "Maximum Subarray",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 98.24,
			"memory": 94.87
		}
	},
	{
		"id": 141,
		"name": "Linked List Cycle",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 87.84,
			"memory": 68.78
		}
	},
	{
		"id": 206,
		"name": "Reverse Linked List",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 98.97,
			"memory": 83.91
		}
	},
	{
		"id": 118,
		"name": "Pascals Triangle",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 99.67,
			"memory": 43.97
		}
	},
	{
		"id": 6,
		"name": "Zigzag Conversion",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 93.4,
			"memory": 77.81
		}
	},
	{
		"id": 1647,
		"name": "Minimum Deletions to Make Character Frequencies Unique",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 71.1,
			"memory": 53.62
		}
	},
	{
		"id": 392,
		"name": "Is Subsequence",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 89,
			"memory": 76.17
		}
	},
	{
		"id": 792,
		"name": "Number of Matching Subsequences",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 91.3,
			"memory": 26.9
		}
	},
	{
		"id": 389,
		"name": "Find the Difference",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 83.11,
			"memory": 95.31
		}
	},
	{
		"id": 151,
		"name": "Reverse Words in a String",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 90.79,
			"memory": 71.85
		}
	},
	{
		"id": 316,
		"name": "Remove Duplicate Letters",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 74.36,
			"memory": 60.26
		}
	},
	{
		"id": 880,
		"name": "Decoded String at Index",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 77.78,
			"memory": 83.3
		}
	},
	{
		"id": 443,
		"name": "String Compression",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 40.88,
			"memory": 79.48
		}
	},
	{
		"id": 905,
		"name": "Sort Array By Parity",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 91.68,
			"memory": 83.29
		}
	},
	{
		"id": 334,
		"name": "Increasing Triplet Subsequence",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 70.61,
			"memory": 85.16
		}
	},
	{
		"id": 345,
		"name": "Reverse Vowels of a String",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 85.11,
			"memory": 96.7
		}
	},
	{
		"id": 1679,
		"name": "Max Number of K-Sum Pairs",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 76.55,
			"memory": 34.88
		}
	},
	{
		"id": 229,
		"name": "Majority Element 2",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 98.72,
			"memory": 52.56
		}
	},
	{
		"id": 92,
		"name": "Reverse Linked List 2",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 95.25,
			"memory": 81.51
		}
	},
	{
		"id": 143,
		"name": "Reorder List",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 91.77,
			"memory": 95.15
		}
	},
	{
		"id": 125,
		"name": "Valid Palindrome",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 82.5,
			"memory": 74.8
		}
	},
	{
		"id": 643,
		"name": "Maximum Average Subarray 1",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 55.7,
			"memory": 78.38
		}
	},
	{
		"id": 724,
		"name": "Find Pivot Index",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 97.95,
			"memory": 38.31
		}
	},
	{
		"id": 1657,
		"name": "Determine if Two Strings Are Close",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 84.3,
			"memory": 78.99
		}
	},
	{
		"id": 2352,
		"name": "Equal Row and Column Pairs",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 98.57,
			"memory": 57.43
		}
	},
	{
		"id": 735,
		"name": "Asteroid Collision",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 83.33,
			"memory": 62.91
		}
	},
	{
		"id": 1095,
		"name": "Find in Mountain Array",
		"complexity": "Hard",
		"performance":
		{
			"runtime": 41.18,
			"memory": 100
		}
	},
	{
		"id": 746,
		"name": "Min Cost Climbing Stairs",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 73.65,
			"memory": 67.81
		}
	},
	{
		"id": 394,
		"name": "Decode string",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 40.85,
			"memory": 42.98
		}
	},
	{
		"id": 844,
		"name": "Backspace String Compare",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 87.54,
			"memory": 93.31
		}
	},
	{
		"id": 341,
		"name": "Flatten Nested List Iterator",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 96.83,
			"memory": 65.08			
		}
	},
	{
		"id": 739,
		"name": "Daily Temperatures",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 91.77,
			"memory": 97.10			
		}
	},
	{
		"id": 901,
		"name": "Online Stock Span",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 56.48,
			"memory": 97.22			
		}
	},
	{
		"id": 649,
		"name": "Dota2 Senate",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 99.65,
			"memory": 92.98		
		}
	},
	{
		"id": 2095,
		"name": "Delete the Middle Node of a Linked List",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 98.61,
			"memory": 38.05		
		}
	},
	{
		"id": 328,
		"name": "Odd Even Linked List",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 86.71,
			"memory": 46.4		
		}
	},
	{
		"id": 2130,
		"name": "Maximum Twin Sum of a Linked List",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 83.19,
			"memory": 49.2		
		}
	},
	{
		"id": 155,
		"name": "Min Stack",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 81.94,
			"memory": 24.84	
		}
	},
	{
		"id": 208,
		"name": "Implement Trie",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 67.72,
			"memory": 94.42
		}
	},
	{
		"id": 211,
		"name": "Design Add and Search Words Data Structure",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 90.66,
			"memory": 74.45
		}
	},
	{
		"id": 2849,
		"name": "Determine if a Cell Is Reachable at a Given Time",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 92.38,
			"memory": 91.43
		}
	},
	{
		"id": 104,
		"name": "Maximum Depth of Binary Tree",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 69.76,
			"memory": 76.20
		}
	},
	{
		"id": 38,
		"name": "Count and Say",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 78.92,
			"memory": 43.87
		}
	},
	{
		"id": 41,
		"name": "First Missing Positive",
		"complexity": "Hard",
		"performance":
		{
			"runtime": 59.81,
			"memory": 65.83
		}
	},
	{
		"id": 1743,
		"name": "Restore the Array From Adjacent Pairs",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 100,
			"memory": 50
		}
	},
	{
		"id": 2785,
		"name": "Sort Vowels in a String",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 94,
			"memory": 98
		}
	},
	{
		"id": 46,
		"name": "Permutations",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 76,
			"memory": 15.8
		}
	},
	{
		"id": 1930,
		"name": "Unique Length-3 Palindromic Subsequences",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 100,
			"memory": 100
		}
	},
	{
		"id": 1980,
		"name": "Find Unique Binary String",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 72,
			"memory": 68
		}
	},
	{
		"id": 1268,
		"name": "Search Suggestions System",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 50,
			"memory": 34.95
		}
	},
	{
		"id": 1662,
		"name": "Check If Two String Arrays are Equivalent",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 89.50,
			"memory": 90.87
		}
	},
	{
		"id": 1436,
		"name": "Destination City",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 96.26,
			"memory": 87.85
		}
	},
	{
		"id": 2125,
		"name": "Number of Laser Beams in a Bank",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 47.6,
			"memory": 98.4
		}
	},
	{
		"id": 2870,
		"name": "Minimum Number of Operations to Make Array Empty",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 36.36,
			"memory": 27.27
		}
	},
	{
		"id": 300,
		"name": "Longest Increasing Subsequence",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 78.29,
			"memory": 17.44
		}
	},
	{
		"id": 938,
		"name": "Range Sum of BST",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 28.39,
			"memory": 21.35
		}
	},
	{
		"id": 1026,
		"name": "Maximum Difference Between Node and Ancestor",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 85.05,
			"memory": 54.21
		}
	},
	{
		"id": 2225,
		"name": "Find Players With Zero or One Losses",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 53.01,
			"memory": 15.66
		}
	},
	{
		"id": 1457,
		"name": "Pseudo-Palindromic Paths in a Binary Tree",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 50.00,
			"memory": 62.50
		}
	},
	{
		"id": 1143,
		"name": "Longest Common Subsequence",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 28.82,
			"memory": 47.00
		}
	},
	{
		"id": 232,
		"name": "Implement Queue using Stacks",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 66.73,
			"memory": 13.38
		}
	},
	{
		"id": 150,
		"name": "Evaluate Reverse Polish Notation",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 89.19,
			"memory": 38.16
		}
	},
	{
		"id": 451,
		"name": "Sort Characters By Frequency",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 95.53,
			"memory": 75.98
		}
	},
	{
		"id": 2149,
		"name": "Rearrange Array Elements by Sign",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 92.86,
			"memory": 36.74
		}
	},
	{
		"id": 2971,
		"name": "Find Polygon With the Largest Perimeter",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 95.6,
			"memory": 15.38
		}
	},
	{
		"id": 912,
		"name": "Sort an Array",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 80.75,
			"memory": 25.00
		}
	},
	{
		"id": 1481,
		"name": "Least Number of Unique Integers after K Removals",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 42.42,
			"memory": 81.2
		}
	},
	{
		"id": 54,
		"name": "Spiral Matrix",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 63.1,
			"memory": 69.18
		}
	},
	{
		"id": 787,
		"name": "Cheapest Flights Within K Stops",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 98.67,
			"memory": 94.67
		}
	},
	{
		"id": 215,
		"name": "Kth Largest Element in an Array",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 67.8,
			"memory": 54.78
		}
	},
	{
		"id": 100,
		"name": "Same Tree",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 76.82,
			"memory": 25.43
		}
	},
	{
		"id": 12,
		"name": "Integer to Roman",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 65.4,
			"memory": 53.06
		}
	},
	{
		"id": 543,
		"name": "Diameter of Binary Tree",
		"complexity": "Easy",
		"performance":
		{
			"runtime": 25.59,
			"memory": 27.43
		}
	},
	{
		"id": 513,
		"name": "Find Bottom Left Tree Value",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 46.15,
			"memory": 82.69
		}
	},
	{
		"id": 61,
		"name": "Rotate List",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 82.72,
			"memory": 64.05
		}
	},
	{
		"id": 1609,
		"name": "Even Odd Tree",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 51.52,
			"memory": 36.36
		}
	},
	{
		"id": 1079,
		"name": "Letter Tile Possibilities",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 60.87,
			"memory": 93.48
		}
	},
	{
		"id": 1673,
		"name": "Find the Most Competitive Subsequence",
		"complexity": "Medium",
		"performance":
		{
			"runtime": 60.61,
			"memory": 57.58
		}
	},
	{
		"id": 321,
		"name": "Create Maximum Number",
		"complexity": "Hard",
		"performance":
		{
			"runtime": 25.00,
			"memory": 8.33
		}
	}
]